{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["DrawingToolBox","colors","active","onChange","className","styles","key","onClick","classNames","style","backgroundColor","color","ReactCanvasPaint","props","canvas","useRef","useState","drawing","setDrawing","position","setPosition","activeColor","setActiveColor","onDown","useCallback","coordinates","getCoordinates","onUp","event","x","y","offsetTop","onMove","newPosition","drawLine","originalPosition","context","handleDraw","data","useEffect","ref","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onMouseLeave","onMouseMove","onTouchMove","width","height","PropTypes","viewOnly","onDraw","strokeWidth","number","App","undefined","draw","setDraw","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89821b88.chunk.js","sourcesContent":["import React, { useRef, useState, useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport styles from './styles.module.css'\n\nfunction DrawingToolBox({ colors, active, onChange }) {\n  return (\n    <div className={styles.toolBoxContainer}>\n      <div className={styles.colors}>\n        {colors.map((color, key) => (\n          <button\n            key={key}\n            onClick={() => onChange(color)}\n            className={classNames(styles.color, {\n              [styles.active]: active === color\n            })}\n            style={{ backgroundColor: color }}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nfunction ReactCanvasPaint(props) {\n  const canvas = useRef(null)\n  const [drawing, setDrawing] = useState(false)\n  const [position, setPosition] = useState(null)\n  const [activeColor, setActiveColor] = useState(props.colors[0])\n\n  const onDown = useCallback((event) => {\n    const coordinates = getCoordinates(event)\n    if (coordinates) {\n      setPosition(coordinates)\n      setDrawing(true)\n    }\n  }, [])\n\n  const onUp = useCallback(() => {\n    setDrawing(false)\n    setPosition(null)\n  }, [])\n\n  const getCoordinates = (event) => {\n    if (!canvas.current) {\n      return null\n    }\n\n    const x = event.pageX || event.touches[0].pageX\n    const y = event.pageY || event.touches[0].pageY\n\n    return {\n      x: x - canvas.current.offsetLeft,\n      y: y - canvas.current.offsetTop\n    }\n  }\n\n  const onMove = useCallback(\n    (event) => {\n      if (drawing) {\n        const newPosition = getCoordinates(event)\n        if (position && newPosition) {\n          drawLine(position, newPosition)\n          setPosition(newPosition)\n        }\n      }\n    },\n    [drawing, position]\n  )\n\n  const drawLine = (originalPosition, newPosition) => {\n    if (!canvas.current) {\n      return null\n    }\n\n    const context = canvas.current.getContext('2d')\n\n    if (context) {\n      context.strokeStyle = activeColor\n      context.lineJoin = 'round'\n      context.lineWidth = props.strokeWidth\n\n      context.beginPath()\n      context.moveTo(originalPosition.x, originalPosition.y)\n      context.lineTo(newPosition.x, newPosition.y)\n      context.closePath()\n\n      context.stroke()\n      handleDraw(context.getImageData(0, 0, props.width, props.height))\n    }\n  }\n\n  const handleDraw = (data) => {\n    if (typeof props.onDraw === 'function') {\n      props.onDraw(data)\n    }\n  }\n\n  useEffect(() => {\n    if (typeof props.data === 'object' && canvas.current) {\n      const context = canvas.current.getContext('2d')\n      // TODO: scale imageData\n      context.putImageData(props.data, 0, 0)\n    }\n  }, [props.data])\n\n  return (\n    <div className={styles.container}>\n      <canvas\n        ref={canvas}\n        onMouseDown={props.viewOnly ? undefined : onDown}\n        onTouchStart={props.viewOnly ? undefined : onDown}\n        onMouseUp={props.viewOnly ? undefined : onUp}\n        onTouchEnd={props.viewOnly ? undefined : onUp}\n        onMouseLeave={props.viewOnly ? undefined : onUp}\n        onMouseMove={props.viewOnly ? undefined : onMove}\n        onTouchMove={props.viewOnly ? undefined : onMove}\n        width={props.width}\n        height={props.height}\n      />\n      {!props.viewOnly && (\n        <DrawingToolBox\n          colors={props.colors}\n          active={activeColor}\n          onChange={setActiveColor}\n        />\n      )}\n    </div>\n  )\n}\n\nReactCanvasPaint.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  viewOnly: PropTypes.bool,\n  data: PropTypes.object,\n  onDraw: PropTypes.func,\n  colors: PropTypes.arrayOf(PropTypes.string),\n  strokeWidth: PropTypes.number\n}\n\nReactCanvasPaint.defaultProps = {\n  width: 400,\n  height: 400,\n  viewOnly: false,\n  data: undefined,\n  onDraw: undefined,\n  colors: ['#7030A2', '#000000', '#0170C1', '#FE0002', '#FFFF01', '#00AF52'],\n  strokeWidth: 5\n}\n\nexport default ReactCanvasPaint\n","import React, { useState } from 'react'\nimport ReactCanvasPaint from 'react-canvas-paint'\nimport 'react-canvas-paint/dist/index.css'\n\nconst App = () => {\n  const [draw, setDraw] = useState(undefined)\n\n  return (\n    <div className='container'>\n      <div className='left'>\n        <ReactCanvasPaint onDraw={setDraw} width={400} height={400} />\n      </div>\n      <div className='right'>\n        <ReactCanvasPaint viewOnly width={400} height={400} data={draw} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}